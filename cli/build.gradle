import groovy.json.JsonSlurper

plugins {
    id "com.github.johnrengelman.shadow"
    id "de.undercouch.download"
}

archivesBaseName = "minecraftanalysis-cli"

def workingDirectory = new File(rootDir, "run")
def versionManifest = new File(workingDirectory, "version_manifest.json")

configurations {
    shadow {
        runtime.extendsFrom(shadow)
    }

    build.dependsOn("signJar")
    compileJava.dependsOn(":minecraftanalysis-common:build")
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
}

dependencies {
    shadow(project(path: ":minecraftanalysis-common"))
    shadow("com.beust:jcommander:1.81")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.14.1")
    shadow("org.apache.logging.log4j:log4j-core:2.14.1")
    shadow("org.apache.logging.log4j:log4j-slf4j-impl:2.14.1")
    shadow("org.fusesource.jansi:jansi:2.3.2")
}

jar {
    manifest {
        attributes("Main-Class": "io.github.lxgaming.analysis.cli.Main")
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
}

task createWorkingDirectory {
    doFirst {
        if (!workingDirectory.exists() && !workingDirectory.mkdir()) {
            throw new StopExecutionException("Failed to create working directory")
        }
    }
}

task downloadManifest(dependsOn: createWorkingDirectory, type: Download) {
    src("https://launchermeta.mojang.com/mc/game/version_manifest.json")
    dest(versionManifest)
    quiet(false)
    overwrite(true)
    onlyIfModified(true)
}

task runAnalysis(dependsOn: [build, createWorkingDirectory, downloadManifest]) {
    doFirst {
        def manifest = new JsonSlurper().parse(versionManifest)
        for (def version : manifest["versions"]) {
            // Versions after 1.14.4 which don't have mappings
            if (version["id"] == "19w34a" || version["id"] == "19w35a") {
                continue
            }

            if (project.hasProperty("analysis.type") && project.property("analysis.type") != version["type"]) {
                continue
            }

            project.ext.setProperty("analysis.version", version["id"])
            runCli(workingDirectory)
            project.ext.setProperty("analysis.version", "")

            if (version["id"] == "1.14.4") {
                return
            }
        }
    }
}

void runCli(File workingDirectory) {
    def launcher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }.get()

    project.javaexec {
        executable(launcher.executablePath)
        if (project.hasProperty("analysis.reconstruct")) {
            args("--reconstruct")
        }

        args(
                "--threads", project.hasProperty("analysis.threads") ? project.property("analysis.threads") : "0",
                "--platform", project.hasProperty("analysis.platform") ? project.property("analysis.platform") : "server",
                "--version", project.hasProperty("analysis.version") ? project.property("analysis.version") : ""
        )
        classpath(jar.archiveFile.get())
        workingDir(workingDirectory)
    }
}